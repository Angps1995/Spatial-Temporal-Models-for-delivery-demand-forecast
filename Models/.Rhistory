h_type[2:3]=1
}
if (h_nucleus==6) {  #2 nuclei 1/2 gen
if (h_arra %in% c(2,4,5,6,8,9,10,12))
h_type[2]=1
else
h_type[3]=1
}
if (h_nucleus>=7) {  #2nuclei >=3 gen /  3nuclei
if(head_age>=14) {  #65 years old
h_type[2]=1
}
else {
h_type[2:3]=1
}
}
}
head_attrs <- get_subzones(head_attrs, house_attrs)
house_attrs[10] <- head_attrs[22]  #subzone
head_attrs <- c(head_attrs, house_attrs[3:9])
head_ori_attrs <- head_attrs
for (i in 1:length(head_attrs)) {
# head_attrs[i] <- names(attribute_to_dict_mapping[[names(attribute_to_dict_mapping)[i]]])[strtoi(head_attrs[i])]  # convert int to categories
head_attrs[i] <- convert_int_to_cat(i, head_attrs)
}
head_attrs<-c(1,head_attrs)  # Add hh boolean at the start
individual_attrs[[toString(individual_id)]] <- head_attrs  # update individual attrs dict
h_members <- append(h_members, individual_id)   #update household members list
individual_id <- individual_id + 1
if (hh_size > 1) {
if (head_attrs[7] == "Married") {
c_first <- generate_couple(head_ori_attrs, work=TRUE)
if (c_first[10]==1) {  #if working
c_first <- get_attrs_workers(c_first)
n <- n+1
} else {  # not workers
c_first[11] <- NA
c_first[15] <- NA
c_first[16] <- NA
c_first[18] <- NA
c_first[20] <- NA
}
c_attrs<-get_attrs_common(c_first, house_attrs, married_poss=TRUE) #including common features
c_attrs[22] <- house_attrs[10]
c_attrs <- c(c_attrs, house_attrs[3:9])
for (i in 1:length(c_attrs)) {
# c_attrs[i] <- names(attribute_to_dict_mapping[[names(attribute_to_dict_mapping)[i]]])[strtoi(c_attrs[i])]
c_attrs[i] <- convert_int_to_cat(i,c_attrs)
}
c_attrs<-c(0,c_attrs)  #add HH Head boolean
individual_attrs[[toString(individual_id)]] <- c_attrs # update individual attrs dict
h_members <- append(h_members, individual_id) #update household members list
individual_id <- individual_id + 1
}
#for household type, if there is elder
if ((length(h_members) < hh_size) && (h_type[3]==1)) {
#elder 1
elder_con <- rep(0,6)
elder_con[1] <- house_attrs[3]  #type of dwelling
elder_con[2] <- head_ori_attrs[5]   #assume same ethnics
## add in age ##
elder_con[4] <- get_age(head_age,type="elder")
################
if ((length(h_members) + 1) < hh_size) {  #enough memebrs for elder to be married
elder_con <- get_attrs_elder(elder_con, married_poss=TRUE)  #dwelling, ethnics, gender, age, marital ,mobility
} else {
elder_con <- get_attrs_elder(elder_con, married_poss=FALSE)  #dwelling, ethnics, gender, age, marital (CANT BE MARRIED/SINGLE) ,mobility
}
e_attrs <- c(head_ori_attrs[1:2],elder_con[3:4],elder_con[2],elder_con[5],rep(0,14),elder_con[6])
e_attrs[10] <- 2  #elder not working
e_attrs[11] <- NA
e_attrs[15] <- NA
e_attrs[16] <- NA
e_attrs[18] <- NA
e_attrs[20] <- NA
e_attrs <- get_attrs_common(e_attrs, house_attrs, married_poss=TRUE) #get other attrs, elderly cant be single here
e_attrs[22] <- house_attrs[10]
e_attrs <- c(e_attrs, house_attrs[3:9])
e_ori_attrs <- e_attrs
for (i in 1:length(e_attrs)) {
#e_attrs[i] <- names(attribute_to_dict_mapping[[names(attribute_to_dict_mapping)[i]]])[strtoi(e_attrs[i])]
e_attrs[i] <- convert_int_to_cat(i, e_attrs)
}
e_attrs<-c(0, e_attrs)  #Add boolean for hh head
individual_attrs[[toString(individual_id)]] <- e_attrs # update individual attrs dict
h_members <- append(h_members, individual_id) #update household members list
individual_id <- individual_id + 1
# if another elder (elder is married)
if ((e_ori_attrs[6]==2) && (length(h_members) < hh_size)) {   #married
e2_attrs<-generate_couple(e_ori_attrs, work=FALSE)  # 21 attrs
# still have to get mobility?
# dwelling, ethics, gender, age,ms,mobility
e2_con <- c(elder_con[1:2], ifelse(e_ori_attrs[3]==2,1,2), convert_age_18_to_5_elders(e2_attrs[4]), 2, 0)
e2_con <- get_attrs_elder(e2_con, married_poss=TRUE)
e2_attrs[10] <- 2  #elder not working
e2_attrs[11] <- NA
e2_attrs[15] <- NA
e2_attrs[16] <- NA
e2_attrs[18] <- NA
e2_attrs[20] <- NA
e2_attrs[21] <- e2_con[6]
e2_attrs <- get_attrs_common(e2_attrs, house_attrs, married_poss=TRUE)  #elderly cant be single here
e2_attrs[22] <- house_attrs[10]
e2_attrs <- c(e2_attrs, house_attrs[3:9])
for (i in 1:length(e2_attrs)) {
# e2_attrs[i] <- names(attribute_to_dict_mapping[[names(attribute_to_dict_mapping)[i]]])[strtoi(e2_attrs[i])]
e2_attrs[i] <- convert_int_to_cat(i, e2_attrs)
}
e2_attrs<-c(0,e2_attrs)
individual_attrs[[toString(individual_id)]] <- e2_attrs # update individual attrs dict
h_members <- append(h_members, individual_id) #update household members list
individual_id <- individual_id + 1
}
}
#if head has child
if(h_type[2]==1) { #use child to fill
while (length(h_members) < hh_size) {
# ch_age=sample(1:18,size=1,prob=get_prob_age(h_arra, head_age)) #choose age, should condition on head_ori_attrs[4], #may also consider living arrangement
ch_age=get_age(head_age,type="child")
if (ch_age==4) {
ch_status=sample(c("student","working",'Not working'),size=1,prob=c(0.8565,0.1435,0))
}
else if (ch_age==5) {
ch_status=sample(c("student","working",'Not working'),size=1,prob=c(0.4055,0.5698,0.0247))
}
else if (ch_age<4) {
if(ch_age==1){
child_attrs=c(head_ori_attrs[1:2],0,ch_age,head_ori_attrs[5],rep(NA,16))
child_attrs[3]=sample(c(1,2),size=1,prob=prob_kid_gender[head_ori_attrs[5],]) #gender
child_attrs[9]=sample(c(1,2),size=1,prob=prob_kid_rs[,child_attrs[3],head_ori_attrs[5]]) #rs, 1 for citizen, 2 for pr
}
ch_status=c("student")
}
else {
ch_status=sample(c("working","Not working"),size=1, prob=prob_child_status[ch_age-5,])
}
if (ch_status=="student") {
ch_con <- rep(0,9) # what condition to use, head ethinicity?
ch_con[1] <- ch_age
ch_con[2] <- head_ori_attrs[1] #location
ch_con[3] <- house_attrs[3] #dwelling
ch_con[4] <- head_ori_attrs[5] #assume same ethnics
ch_con[5] <- house_attrs[9] #language home
ch1_attrs <- get_attrs_student(ch_con) #[age, location, dwelling, ethnics, language home, gender, education, mode of transport, travelling time]
#ch_attrs <- c(head_ori_attrs[1:2],ch1_attrs[6:7],head_ori_attrs[5],0,0,ch1_attrs[8],rep(0,8),ch1_attrs[9],0,ch1_attrs[10],0,0)
ch_attrs <- c(head_ori_attrs[1:2],ch1_attrs[6],ch_age, head_ori_attrs[5],1,NA,ch1_attrs[7],0,2,NA,0,rep(NA,4),ch1_attrs[8], NA,ch1_attrs[9],NA, NA)
# child_attrs<-get_attrs_common(ch_attrs, house_attrs) #get other attrs
#not assume single !
if ((length(h_members) + 1) < hh_size && ch_age>=4){ #enough size and age can be married
child_attrs<-get_attrs_common(ch_attrs, house_attrs, married_poss=TRUE)
}
else{
ch_attrs[6]=1 #single
child_attrs<-get_attrs_common(ch_attrs, house_attrs, married_poss=FALSE)#get other attrs
}
}
else if (ch_status=="working") {
ch_first <- c(head_ori_attrs[1:2],0,ch_age,head_ori_attrs[5],0,0,NA,0,1,rep(0,6),NA,0,NA,0,0)
# GET GENDER, QUALIFICATION FIRST
ch_second <- get_attrs_workers(ch_first)
#child_attrs <- get_attrs_common(ch_second, house_attrs)
if ((length(h_members) + 1) > hh_size) {  #not enough memebrs for it to be married
child_attrs <- get_attrs_common(ch_second, house_attrs, married_poss=FALSE )
}
else {
child_attrs <- get_attrs_common(ch_second, house_attrs,married_poss=TRUE)
}
n <- n+1
}
else {
ch_first=c(head_ori_attrs[1:2],0,ch_age,head_ori_attrs[5],0,0,NA,0,2,rep(0,11))
ch_first[11] <- NA
ch_first[15] <- NA
ch_first[16] <- NA
ch_first[18] <- NA
ch_first[20] <- NA
# child_attrs=get_attrs_common(ch_first, house_attrs)
if ((length(h_members) + 1) > hh_size) {  #enough memebrs for it to be married
child_attrs=get_attrs_common(ch_first, house_attrs,married_poss=FALSE)
}
else{
child_attrs=get_attrs_common(ch_first, house_attrs,married_poss=TRUE)
}
}
child_attrs[22] <- house_attrs[10]
child_attrs <- c(child_attrs, house_attrs[3:9])
ch_ori_attrs <- child_attrs
for (i in 1:length(child_attrs)) {
# child_attrs[i] <- names(attribute_to_dict_mapping[[names(attribute_to_dict_mapping)[i]]])[strtoi(child_attrs[i])]
child_attrs[i] <- convert_int_to_cat(i, child_attrs)
}
child_attrs<-c(0,child_attrs)
individual_attrs[[toString(individual_id)]] <- child_attrs # update individual attrs dict
h_members <- append(h_members, individual_id) #update household members list
individual_id <- individual_id + 1
if ((child_attrs[7]=="Married") && (length(h_members)<hh_size)) {
cc_first <- generate_couple(ch_ori_attrs, work=TRUE)
if(cc_first[10]==1){
cc_first<-get_attrs_workers(cc_first)
n <- n+1
}
if (cc_first[10] == 2) {
cc_first[11] <- NA
cc_first[15] <- NA
cc_first[16] <- NA
cc_first[18] <- NA
cc_first[20] <- NA
}
cc_attrs<-get_attrs_common(cc_first, house_attrs, married_poss=TRUE) #including common features
cc_attrs[22] <- house_attrs[10]
cc_attrs <- c(cc_attrs, house_attrs[3:9])
for (i in 1:length(cc_attrs)) {
# cc_attrs[i] <- names(attribute_to_dict_mapping[[names(attribute_to_dict_mapping)[i]]])[strtoi(cc_attrs[i])]
cc_attrs[i] <- convert_int_to_cat(i, cc_attrs)
}
cc_attrs<-c(0,cc_attrs)
individual_attrs[[toString(individual_id)]] <- cc_attrs # update individual attrs dict
h_members <- append(h_members, individual_id) #update household members list
individual_id <- individual_id + 1
}
}
}
while (length(h_members) < hh_size) {
# ch_age=sample(1:18,size=1,prob=get_prob_age(h_arra, head_age)) #choose age, should condition on head_ori_attrs[4], #may also consider living arrangement
ch_age=get_age(head_age, type='others')
if (ch_age==4) {
ch_status=sample(c("student","working",'Not working'),size=1,prob=c(0.8565,0.1435,0))
}
else if (ch_age==5) {
ch_status=sample(c("student","working",'Not working'),size=1,prob=c(0.4055,0.5698,0.0247))
}
else if (ch_age<4) {
if(ch_age==1){
child_attrs=c(head_ori_attrs[1:2],0,ch_age,head_ori_attrs[5],rep(NA,16))
child_attrs[3]=sample(c(1,2),size=1,prob=prob_kid_gender[head_ori_attrs[5],]) #gender
child_attrs[9]=sample(c(1,2),size=1,prob=prob_kid_rs[,child_attrs[3],head_ori_attrs[5]]) #rs, 1 for citizen, 2 for pr
}
else {
ch_status=c("student")
}
}
##ADD ELDER
else if(ch_age>=14) {#if older than 65 Y
ch_status=c("elder")
e_working=sample(c("working","Not working"),size=1, prob=prob_child_status[ch_age-5,])
}
else{
ch_status=sample(c("working","Not working"),size=1, prob=prob_child_status[ch_age-5,])
}
if(ch_status=="student"){
ch_con <- rep(0,9) # what condition to use, head ethinicity?
ch_con[1] <- ch_age
ch_con[2] <- head_ori_attrs[1] #location
ch_con[3] <- house_attrs[3] #dwelling
ch_con[4] <- head_ori_attrs[5] #assume same ethnics
ch_con[5] <- house_attrs[9] #language home
# ch_con[6] <- 1  #single
ch1_attrs <- get_attrs_student(ch_con) #[age, location, dwelling, ethnics, language home, gender, education, mode of transport, travelling time]
#ch_attrs <- c(head_ori_attrs[1:2],ch1_attrs[6:7],head_ori_attrs[5],0,0,ch1_attrs[8],rep(0,8),ch1_attrs[9],0,ch1_attrs[10],0,0)
ch_attrs <- c(head_ori_attrs[1:2],ch1_attrs[6],ch_age, head_ori_attrs[5],1,NA,ch1_attrs[7],0,2,NA,0,rep(NA,4),ch1_attrs[8], NA,ch1_attrs[9],NA, NA)
#child_attrs<-get_attrs_common(ch_attrs, house_attrs) #get other attrs
if ((length(h_members) + 1) < hh_size && ch_age>=4){ #can get married
child_attrs<-get_attrs_common(ch_attrs, house_attrs, married_poss=TRUE)
}
else{ #single
ch_attrs[6]=1
child_attrs<-get_attrs_common(ch_attrs, house_attrs, married_poss=FALSE)#get other attrs
}
}
else if (ch_status=="working") {
ch_first <- c(head_ori_attrs[1:2],0,ch_age,head_ori_attrs[5],1,0,NA,0,1,rep(0,6),NA,0,NA,0,0)
# GET GENDER, QUALIFICATION FIRST
ch_second <- get_attrs_workers(ch_first)
#child_attrs <- get_attrs_common(ch_second, house_attrs)
if ((length(h_members) + 1) > hh_size) {  #NOT enough memebrs for person to be married
child_attrs <- get_attrs_common(ch_second, house_attrs, married_poss=FALSE)
}
else {
child_attrs <- get_attrs_common(ch_second, house_attrs,married_poss=TRUE)
}
n <- n+1
}
else if(ch_status=="Not working"){
ch_first=c(head_ori_attrs[1:2],0,ch_age,head_ori_attrs[5],0,0,NA,0,2,rep(0,11))
ch_first[11] <- NA
ch_first[15] <- NA
ch_first[16] <- NA
ch_first[18] <- NA
ch_first[20] <- NA
if ((length(h_members) + 1) > hh_size) {  #not enough memebrs for elder to be married
child_attrs=get_attrs_common(ch_first, house_attrs, married_poss=FALSE) #get ms
}
else{
child_attrs=get_attrs_common(ch_first, house_attrs, married_poss=TRUE)
} #get ms
}
else if (ch_status=="elder"){
ch_con <- rep(0,6)
ch_con[1] <- house_attrs[3]  #type of dwelling
ch_con[2]<-head_ori_attrs[5] #same ethnics
ch_con[4]<-ch_age #age
if ((length(h_members) + 1) < hh_size) {  #enough memebrs for elder to be married
ch_con <- get_attrs_elder(ch_con, married_poss=TRUE)  #dwelling, ethnics, gender, age, marital ,mobility
} else {
ch_con <- get_attrs_elder(ch_con, married_poss=FALSE)  #dwelling, ethnics, gender, age, marital (CANT BE MARRIED/SINGLE) ,mobility
}
child_first <- c(head_ori_attrs[1:2],ch_con[3:4],ch_con[2],ch_con[5],rep(0,14),ch_con[6])
if (e_working=="working"){
ch_first[10]=1 #working
ch_second <- get_attrs_workers(ch_first)
n<-n+1
}
else{ #not working
ch_second=ch_first
ch_second[10]=2
ch_second[11] <- NA
ch_second[15] <- NA
ch_second[16] <- NA
ch_second[18] <- NA
ch_second[20] <- NA
}
child_attrs <- get_attrs_common(ch_second, house_attrs,married_poss=TRUE) #even here is true, already has value
}
# else{
#     ch_first=c(head_ori_attrs[1:2],0,ch_age,head_ori_attrs[5],1,0,NA,0,2,rep(0,11))
#     ch_first[11] <- NA
#     ch_first[15] <- NA
#     ch_first[16] <- NA
#     ch_first[18] <- NA
#     ch_first[20] <- NA
#     child_attrs=get_attrs_common(ch_first, house_attrs, married_poss=TRUE)
# }
child_attrs[22] <- house_attrs[10]
child_attrs <- c(child_attrs, house_attrs[3:9])
ch_ori_attrs <- child_attrs
for (i in 1:length(child_attrs)) {
# child_attrs[i] <- names(attribute_to_dict_mapping[[names(attribute_to_dict_mapping)[i]]])[strtoi(child_attrs[i])]
child_attrs[i] <- convert_int_to_cat(i, child_attrs)
}
child_attrs<-c(0,child_attrs)
individual_attrs[[toString(individual_id)]] <- child_attrs # update individual attrs dict
h_members <- append(h_members, individual_id) #update household members list
individual_id <- individual_id + 1
if ((child_attrs[7]=="Married") && (length(h_members)<hh_size)) {
cc_first <- generate_couple(ch_ori_attrs, work=TRUE)
if(cc_first[10]==1){
cc_first<-get_attrs_workers(cc_first)
n <- n+1
}
if (cc_first[10] == 2) {
cc_first[11] <- NA
cc_first[15] <- NA
cc_first[16] <- NA
cc_first[18] <- NA
cc_first[20] <- NA
}
cc_attrs<-get_attrs_common(cc_first, house_attrs, married_poss=TRUE) #including common features
cc_attrs[22] <- house_attrs[10]
cc_attrs <- c(cc_attrs, house_attrs[3:9])
for (i in 1:length(cc_attrs)) {
# cc_attrs[i] <- names(attribute_to_dict_mapping[[names(attribute_to_dict_mapping)[i]]])[strtoi(cc_attrs[i])]
cc_attrs[i] <- convert_int_to_cat(i, cc_attrs)
}
cc_attrs<-c(0,cc_attrs)
individual_attrs[[toString(individual_id)]] <- cc_attrs # update individual attrs dict
h_members <- append(h_members, individual_id) #update household members list
individual_id <- individual_id + 1
}
}
}
while (length(h_members) < 10){
h_members <- append(h_members,0)  # append 0s to remaining empty members so it is easier to convert to dataframe
}
# house_attrs[6] <- h_workers + 1  #mapping
house_attrs[6] <- n + 1  #no of workers
# if (house_attrs[6] == 1) {
#     #no workers
#     house_attrs[7] <- 1
# }
for (j in 1: length(house_attrs)){
house_attrs[j] <- convert_houseattrs_int_to_cat(j, house_attrs)
}
for (i in 1:hh_size) {
individual_attrs[[toString(individual_id - i)]][27] <- house_attrs[6]
}
house_attrs<-c(household_id,house_attrs)
all_households[[toString(household_id)]] <- append(house_attrs, h_members)  # store and update household attrs
household_id <- household_id + 1
}
}
# get number of households in location
return (list('all_households'=all_households, 'individual_attrs'=individual_attrs))
}
test <-model()
all_households <- test$all_households
individual_attrs <- test$individual_attrs
ind_df <- convert_ind_attr_to_csv(individual_attrs)
hh_df <- convert_hh_to_csv(all_households)
ipf_lang <- readRDS('~/Documents/NUS_RIPS/Creation-of-synthetic-households-for-epidermic-simulations/IPF_Matrix_Full/IPF_Language_matrixrds')
ipf_lang <- readRDS('~/Documents/NUS_RIPS/Creation-of-synthetic-households-for-epidermic-simulations/IPF_Matrix_Full/IPF_Language_matrix.rds')
dim(ipf_lang)
convert_age_18_to_11 <- function(ori_agegrp) {
if (ori_agegrp <= 6) {
return (1)
}
else if (ori_agegrp >= 16) {
return (11)
}
else {
return (ori_agegrp - 5)
}
}
convert_age_18_to_11(1)
convert_age_18_to_11(2)
convert_age_18_to_11(17)
convert_age_18_to_11(18)
convert_age_18_to_11(5)
convert_age_18_to_11(15)
convert_age_18_to_11(16)
version
plot(cars)
```{r}
plot(cars)
```
df <- read.csv("/home/angps/Documents/Thesis/Data/data.csv")
View(df)
install.packages("tscount")
#Load dataset
full_df <- read.csv("/home/angps/Documents/Thesis/Data/data.csv")
df_atleast_50cts <- read.csv("/home/angps/Documents/Thesis/Data/data_>=50cts.csv")
#Load dataset
full_df <- read.csv("/home/angps/Documents/Thesis/Data/data.csv")
df_atleast_50cts <- read.csv("/home/angps/Documents/Thesis/Data/data_>=50cts.csv")
library(tscount)
df_atleast_50cts[1:,]
df_atleast_50cts[1,]
as.numeric(df_atleast_50cts[1,])
countdistr(as.numeric(df_atleast_50cts[1,]))
library(tscount)
library(tscount)
library(tscount)
ddistr(as.numeric(df_atleast_50cts[1,]))
tsglm(as.numeric(df_atleast_50cts[1,]))
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
plot(fit)
library(tscount)
#Load dataset
full_df <- read.csv("/home/angps/Documents/Thesis/Data/data.csv")
df_atleast_50cts <- read.csv("/home/angps/Documents/Thesis/Data/data_>=50cts.csv")
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
fit
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
summary(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
summary.fit
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
summary.tsglm(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
summary(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
summary(fit)
plot(fit)
library(tscount)
#Load dataset
full_df <- read.csv("/home/angps/Documents/Thesis/Data/data.csv")
df_atleast_50cts <- read.csv("/home/angps/Documents/Thesis/Data/data_>=50cts.csv")
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
summary(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
RMSE(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
rmse(fit)
?tsglm
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
fit.residuals
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
fit.residuals()
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
residuals(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
score(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]))
fitted.values(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]), past_obs = 2)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]), model = list(past_obs = 2))
fitted.values(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]), model = list(past_obs = 1))
fitted.values(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]), model = list(past_obs = 1,  xreg=interventions))
fit <- tsglm(as.numeric(df_atleast_50cts[1,]),  model = list(past_obs = 1, past_mean = 1), distr = "poisson")
fitted.values(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]),  model = list(past_obs = 1, past_mean = 1), distr = "poisson")
summary(fit)
fit <- tsglm(as.numeric(df_atleast_50cts[1,]),  model = list(past_obs = 1, past_mean = 1), distr = "poisson")
predict(fit, n.ahead=5)
fit <- lm(as.numeric(df_atleast_50cts[1,]),  model = list(past_obs = 1, past_mean = 1), distr = "poisson")
fit <- glm(as.numeric(df_atleast_50cts[1,]),  model = list(past_obs = 1, past_mean = 1), distr = "poisson")
#fit <- tsglm(as.numeric(df_atleast_50cts[1,]),  model = list(past_obs = 1, past_mean = 1), distr = "poisson")
fit <- glm(as.numeric(df_atleast_50cts[1,]), family = "poisson")
#fit <- tsglm(as.numeric(df_atleast_50cts[1,]),  model = list(past_obs = 1, past_mean = 1), distr = "poisson")
fit <- glm(data=as.numeric(df_atleast_50cts[1,]), family = "poisson")
fit <- tsglm(as.numeric(df_atleast_50cts[1,]),  model = list(past_obs = 1, past_mean = 12), distr = "poisson")
predict(fit, n.ahead=5)
as.numeric(df_atleast_50cts[1,])
fit$fitted.values
fit$score
fit$link
fit <- tsglm(as.numeric(df_atleast_50cts[1,]),  model = list(past_obs = 1, past_mean = 12), distr = "poisson",link="log")
predict(fit, n.ahead=5)
fit$fitted.values
fit <- tsglm(as.numeric(df_atleast_50cts[1,]),  model = list(past_obs = 1, past_mean = 12), distr = "poisson",link="logit")
